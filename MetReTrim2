#!/usr/bin/python

#version2.0
"""This code takes an input folder containing fastq or fastq.gz files and primer(s) sequence(s) either paired-end or single-end or both
and trims the reads with respect to the primer sequence(s). The output files can put in the input folder or a separate folder can be created."""

import os
import re
import sys
import getopt
import subprocess
import regex
import collections
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

class MetReTrim:
    
    def assign_command_line_args_as_variables(self,argv):
        
        in_folder = ''
        out_folder = ''
        primer = ''
        primer1= ''
        primer2=''
        keep="keep"
        mismatch="3"
        visualise="noplot"
        stringent="False"
        match_score="5"
        mismatch_score="-1"
        read_gap_open_penalty="-6"
        read_gap_extend_penalty="-.6"
        primer_gap_open_penalty="-6"
        primer_gap_extend_penalty="-.6"
        min_read_length="30"
        max_gaps="3"
        five_prime_offset="15"

        if len(argv)==0:
            self.print_usage_message()
		

        try:opts, args = getopt.getopt(argv,"hi:o:f:r:p:k:m:v:s:y:n:l:e:x:z:c:g:d:",["ifolder=","ofolder=","primer1=","primer2=","primer=","keep=","mismatch=","visualise=","stringent=","match_score=","mismatch_score=","read_gap_open_penalty=","read_gap_extend_penalty=","primer_gap_open_penalty=","primer_gap_extend_penalty=","min_read_length=","max_gaps=","five_prime_offset="])
        except getopt.GetoptError:print_usage_message()

        for opt, arg in opts:
            if opt == '-h':self.print_usage_message()
            elif opt in ("-i", "--ifolder"):in_folder = arg
            elif opt in ("-o", "--ofolder"):out_folder = arg
            elif opt in ("-f", "--primer1"):primer1 = arg.strip()
            elif opt in ("-r", "--primer2"):primer2 = arg.strip()
            elif opt in ("-p", "--primer"):primer = arg.strip()
            elif opt in ("-k","--keep"):keep = arg.strip()
            elif opt in ("-m","--mismatch"):mismatch = arg.strip()
            elif opt in ("-v","--visualise"):visualise = arg.strip()
            elif opt in ("-s","--stringent"):visualise = arg.strip()
            elif opt in ("-y","--match_score"):visualise = arg.strip()
            elif opt in ("-n","--mismatch_score"):visualise = arg.strip()
            elif opt in ("-l","--read_gap_open_penalty"):visualise = arg.strip()
            elif opt in ("-e","--read_gap_extend_penalty"):visualise = arg.strip()
            elif opt in ("-x","--primer_gap_open_penalty"):visualise = arg.strip()
            elif opt in ("-z","--primer_gap_extend_penalty"):visualise = arg.strip()
            elif opt in ("-c","--min_read_length"):visualise = arg.strip()
            elif opt in ("-g","--max_gaps"):visualise = arg.strip()
            elif opt in ("-d","--five_prime_offset"):visualise = arg.strip()

        return in_folder,out_folder,primer,primer1,primer2,keep,mismatch,visualise,stringent,int(match_score),int(mismatch_score),int(read_gap_open_penalty),float(read_gap_extend_penalty),int(primer_gap_open_penalty),float(primer_gap_extend_penalty),int(min_read_length),int(max_gaps),int(five_prime_offset)

    def prepare_non_empty_primer_list_to_trim(self,in_folder,out_folder,primer,primer1,primer2):
        
        if len(primer)!=0:
            if len(primer1)==0 and len(primer2)==0:l_primer=[primer]
            elif len(primer1)!=0 and len(primer2)!=0:l_primer=[primer1,primer2,primer]
        else:l_primer=[primer1,primer2]

        return l_primer

    def make_trimmed_directory(self,out_folder):
        """if an output directory doesn't exist, it will make a directory with the desired path provided"""
        
        if not os.path.exists(out_folder):
            print("creating the desired output directory...\n")
            mkdir="mkdir %s"%out_folder
            os.system(mkdir)

    def unzip_file(self,in_folder):
        """checks if fastq files are in a compressed format. If it is, then this function extracts the file in the same folder"""
        
        for file_name in os.listdir(in_folder):
            
            if file_name.endswith(".gz"):
                os.system("gunzip %s/%s"%(in_folder,file_name))
            else:
                pass

    def trim_reads(self,in_folder,out_folder,l_primer,keep,mismatch):
        """detects the appropriate primer sequence and trims the read sequence before the start of the primer sequence"""
        
        for fastq_file in os.listdir(in_folder):
            
            if not fastq_file.endswith("_trimmed.fastq") and not fastq_file.endswith("_untrimmed.fastq"):
                check=self.check_fastq(in_folder,fastq_file)
                if not check:continue
                primer=self.detect_primer(in_folder,fastq_file,l_primer)
                trimmed_file,untrimmed_file=self.make_trimmed_filename(fastq_file)
                self.read_fastq_process_write_output(in_folder,fastq_file,out_folder,trimmed_file,untrimmed_file,primer,keep,mismatch)

    def rescue_untrimmed_reads(self,out_folder,l_primer,keep,match_score,mismatch_score,read_gap_open_penalty,read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty,min_read_length,max_gaps,five_prime_offset):
        """carries out dynamic programming based pairwise alignment of primer and read sequence for untrimmed read file"""
        
        for fastq_file in os.listdir(out_folder):
            
            if fastq_file.endswith("_untrimmed.fastq"):
                
                fastq_prefix=fastq_file.split("_untrimmed.fastq")[0]
                primer=self.detect_primer(out_folder,fastq_file,l_primer)
                primer_permutations=list(self.make_primer_permutations(collections.deque(list(primer))))
                
                with open("%s/%s"%(out_folder,fastq_file),"r") as fh, open("%s/%s_trimmed.fastq"%(out_folder,fastq_prefix),"a+") as f, open("%s/%s_untrimmed2.fastq"%(out_folder,fastq_prefix),"w+") as w:
                    
                    while True:
                        info=fh.readline().strip()
                        seq=fh.readline().strip()
                        plus=fh.readline().strip()
                        qual=fh.readline().strip()
                        
                        if len(info)==0:break
                        
                        max_score_index,alignment_info_list=self.choose_best_primer_permutation_alignment(primer_permutations,seq,match_score,mismatch_score,read_gap_open_penalty,read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty)
                        best_one_offset_read_start_match,best_read_match,best_one_offset_primer_start_match,best_primer_match,best_score=self.assign_best_alignment_results_to_variables(max_score_index,alignment_info_list)
                        trimmed_seq,untrimmed_seq,trimmed_qual,untrimmed_qual=self.make_trimmed_untrimmed_seq_qual(seq,qual,keep,int(max_gaps),int(five_prime_offset),best_read_match,best_primer_match,int(best_one_offset_read_start_match),int(min_read_length))
                        
                        if len(trimmed_seq)!=0:f.write("%s\n%s\n%s\n%s\n"%(info,trimmed_seq,plus,trimmed_qual))
                        if len(untrimmed_seq)!=0:w.write("%s\n%s\n%s\n%s\n"%(info,untrimmed_seq,plus,untrimmed_qual))
                
                os.system("rm %s/%s_untrimmed.fastq"%(out_folder,fastq_prefix))
                os.system("mv %s/%s_untrimmed2.fastq %s/%s_untrimmed.fastq"%(out_folder,fastq_prefix,out_folder,fastq_prefix))

    def make_primer_permutations(self,primer):
        r,k=[],None
        while primer:
            c=primer.popleft()
            if c not in '|()':
                k=(k if k else '')+c
            elif c == "|":
                if k:
                    r.append(k)
                k=None
            elif c == '(':
                r=[v+(k or '')+i for i in self.make_primer_permutations(primer) for v in (r if r else [''])]
                k=None
            else:
                if k:
                    r.append(k)
                k=None
                break
        yield from ([i+(k or '') for i in r] if r else [k])

    def choose_best_primer_permutation_alignment(self,primer_permutations,seq,match_score,mismatch_score,read_gap_open_penalty,read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty):
        
        score_list=[];alignment_info_list=[]

        for primer_string in primer_permutations:

            alignment=pairwise2.align.localmd(seq, primer_string, match_score, mismatch_score, read_gap_open_penalty, read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty,one_alignment_only=True)[0]
            matched_alignment_string=format_alignment(*alignment,full_sequences=False)

            matched_alignment_list=matched_alignment_string.split("\n")

            one_offset_read_start_match=matched_alignment_list[0].strip().split(" ")[0].strip()
            read_match=matched_alignment_list[0].strip().split(" ")[1].strip()
            one_offset_primer_start_match=matched_alignment_list[2].strip().split(" ")[0].strip()
            primer_match=matched_alignment_list[2].strip().split(" ")[1].strip()
            score=matched_alignment_list[3].strip().split("=")[1].strip()
            score_list.append(score)
            alignment_info_list.append([one_offset_read_start_match,read_match,one_offset_primer_start_match,primer_match,score])
        
        max_score=max(score_list)
        max_score_index=score_list.index(max_score)

        return max_score_index,alignment_info_list

    def assign_best_alignment_results_to_variables(self,max_score_index,alignment_info_list):

        best_one_offset_read_start_match=alignment_info_list[max_score_index][0]
        best_read_match=alignment_info_list[max_score_index][1]
        best_one_offset_primer_start_match=alignment_info_list[max_score_index][2]
        best_primer_match=alignment_info_list[max_score_index][3]
        best_score=alignment_info_list[max_score_index][4]

        return best_one_offset_read_start_match,best_read_match,best_one_offset_primer_start_match,best_primer_match,best_score

    def make_trimmed_untrimmed_seq_qual(self,seq,qual,keep,max_gaps,five_prime_offset,best_read_match,best_primer_match,best_one_offset_read_start_match,min_read_length):
        
        trimmed_seq=""
        untrimmed_seq=""
        trimmed_qual=""
        untrimmed_qual=""

        if best_read_match.count("-")+best_primer_match.count("-")<=max_gaps and best_one_offset_read_start_match <= five_prime_offset:

            read_string_without_gaps="".join(str(x) for x in best_read_match.split("-"))
            read_substring_index=seq.find(read_string_without_gaps)

            unkeep_index=read_substring_index+len(read_string_without_gaps)
            min_trimmed_seq=seq[unkeep_index:]

            if len(min_trimmed_seq)>=min_read_length:
                if keep=="keep":
                    trimmed_seq=seq[read_substring_index:]
                    trimmed_qual=qual[read_substring_index:]
                elif keep=="unkeep":
                    unkeep_index=read_substring_index+len(read_string_without_gaps)
                    trimmed_seq=seq[unkeep_index:]
                    trimmed_qual=qual[unkeep_index:]
            else:
                untrimmed_seq=seq
                untrimmed_qual=qual

        else:
            untrimmed_seq=seq
            untrimmed_qual=qual

        return trimmed_seq,untrimmed_seq,trimmed_qual,untrimmed_qual
       
    def plot_barplot(self,out_folder):
        """plots barplot for trimmed and untrimmed reads in all samples"""

        initialised_read_count_dictionary=self.prepare_read_count_dictionary(out_folder)
        populated_read_count_dictionary=self.populate_read_count_dictionary(out_folder,initialised_read_count_dictionary)
        filename_prefix_list,untrimmed_percent_list,trimmed_percent_list=self.prepare_input_for_plotting(populated_read_count_dictionary)
        trim_status_dataframe=self.convert_to_pandas_dataframe(filename_prefix_list,untrimmed_percent_list,trimmed_percent_list)

        plt.figure(figsize=(10, 8))
        splot=sns.barplot(x="sample_name", y="percentage", hue="trim_status", data=trim_status_dataframe)
        plt.ylabel("Percentage of reads (untrimmed/trimmed)", size=14)
        plt.xlabel("Sequencing runs", size=14)
        plt.title("Grouped Barplot: Percentage of untrimmed/untrimmed reads per sample", size=18)

        for p in splot.patches:
            splot.annotate(format(p.get_height(), '.000f'),(p.get_x() + p.get_width() / 2., p.get_height()),ha = 'center', va = 'center',size=15,xytext = (0, -12),textcoords = 'offset points')
        
        plt.savefig('%s/metretrim_read_trimmed_untrimmed_log_barplot.pdf'%out_folder,dpi=1800)
        trim_status_dataframe.to_csv('%s/metretrim_read_trimmed_untrimmed_percentage_log.csv'%out_folder)

    def convert_to_pandas_dataframe(self,filename_prefix_list,untrimmed_percent_list,trimmed_percent_list):
        
        filename_column1=[];trim_status_column2=[];percentage_column3=[]
        
        for index,filename_prefix in enumerate(filename_prefix_list):
            filename_column1.append(filename_prefix)
            filename_column1.append(filename_prefix)
            trim_status_column2.append("untrimmed")
            trim_status_column2.append("trimmed")
            percentage_column3.append(untrimmed_percent_list[index])
            percentage_column3.append(trimmed_percent_list[index])

        trim_status_dataframe=pd.DataFrame(list(zip(filename_column1, trim_status_column2, percentage_column3)),columns=['sample_name','trim_status', 'percentage'])
        
        return trim_status_dataframe

    def prepare_input_for_plotting(self,populated_read_count_dictionary):
        
        filename_prefix_list=[];untrimmed_percent_list=[];trimmed_percent_list=[]
        
        for filename_prefix,count_list in populated_read_count_dictionary.items():
            untrimmed_percent=count_list[0]*100.0/(count_list[0]+count_list[1])
            trimmed_percent=count_list[1]*100.0/(count_list[0]+count_list[1])
            filename_prefix_list.append(filename_prefix)
            untrimmed_percent_list.append(untrimmed_percent)
            trimmed_percent_list.append(trimmed_percent)
        
        return filename_prefix_list,untrimmed_percent_list,trimmed_percent_list

    def populate_read_count_dictionary(self,out_folder,read_count_dictionary):
        
        for filename in os.listdir(out_folder):
            
            if filename.endswith("_untrimmed.fastq"):
                filename_prefix=filename.split("_untrimmed.fastq")[0]
                num_lines=sum(1 for line in open('%s/%s'%(out_folder,filename)))
                untrimmed_count=num_lines/4
                read_count_dictionary[filename_prefix][0]=untrimmed_count
            
            elif filename.endswith("_trimmed.fastq"):
                filename_prefix=filename.split("_trimmed.fastq")[0]
                num_lines=sum(1 for line in open('%s/%s'%(out_folder,filename)))
                trimmed_count=num_lines/4
                read_count_dictionary[filename_prefix][1]=trimmed_count
        
        return read_count_dictionary
    
    def prepare_read_count_dictionary(self,out_folder):
        
        read_count_dictionary={}
        
        for filename in os.listdir(out_folder):
            
            if filename.endswith("_untrimmed.fastq"):
                filename_prefix=filename.split("_untrimmed.fastq")[0]
                if not filename_prefix in read_count_dictionary.keys():
                    read_count_dictionary[filename_prefix]=[0,0]
            
            elif filename.endswith("_trimmed.fastq"):
                filename_prefix=filename.split("_trimmed.fastq")[0]
                if not filename_prefix in read_count_dictionary.keys():
                    read_count_dictionary[filename_prefix]=[0,0]
        
        return read_count_dictionary

    def read_fastq_process_write_output(self,in_folder,fastq_file,out_folder,trimmed_file,untrimmed_file,primer,keep,mismatch):
        
        with open("%s/%s"%(in_folder,fastq_file)) as fh, open("%s/%s"%(out_folder,trimmed_file),"w") as f, open("%s/%s"%(out_folder,untrimmed_file),"w") as w:
            
            while True:
                info=fh.readline().strip() 
                seq=fh.readline().strip()
                plus=fh.readline().strip()
                qual=fh.readline().strip()
                if len(info)==0:break
                trimmed_seq,trimmed_qual,untrimmed_seq,untrimmed_qual=self.seq_process(seq,qual,primer,keep,mismatch)
                if len(trimmed_seq)!=0:f.write("%s\n%s\n%s\n%s\n"%(info,trimmed_seq,plus,trimmed_qual))
                if len(untrimmed_seq)!=0:w.write("%s\n%s\n%s\n%s\n"%(info,untrimmed_seq,plus,untrimmed_qual))

        self.remove_empty_file(out_folder,[trimmed_file,untrimmed_file])
		
    def check_fastq(self,in_folder,fastq_file):
        """check if the file format is fastq"""
        
        if fastq_file.endswith(".fastq"):
            with open("%s/%s"%(in_folder,fastq_file)) as fh:
                num_lines=len(fh.readlines())
            if num_lines%4==0:
                return True
            else:
                print("%s file doesn't have equal number of fastq lines.\nSkipping this file...\n"%fastq_file)
                return False 

        else:
            print("%s doesn't seem to be a fastq file. Please check the format and run this file again.\nSkipping this file...\n"%fastq_file)
            return False

    def detect_primer(self,in_folder,fastq_file,l_primer):
        """Detects which primer is to be used: if single end, return the only primer; if paired end, returns either forward read or reverse primer"""

        if len(l_primer)==0:
            print("please provide the primer sequence(s)...\nExiting...\n")
            sys.exit(2)
        elif len(l_primer)==1:
            read_type=int(self.detect_read_type(in_folder,fastq_file))-1
            if read_type==3:
                primer=self.process_primer(l_primer[0])
            else:
                print("please provide the correct primer sequence...\nExiting...\n")
                sys.exit(2)
        elif len(l_primer)==2:
            read_type=int(self.detect_read_type(in_folder,fastq_file))-1
            primer=self.process_primer(l_primer[read_type])
        elif len(l_primer)==3:
            read_type=int(self.detect_read_type(in_folder,fastq_file))-1
            primer=self.process_primer(l_primer[read_type])

        if len(primer)==0:
            print("please provide the correct primer sequence...\nExiting...\n")
            sys.exit(2)

        return primer

    def detect_read_type(self,in_folder,fastq_file):
        """detects if forward read or reverse read or single-end read"""
        
        read_type=0
        
        with open("%s/%s"%(in_folder,fastq_file)) as m:
            while True:
                info=m.readline()
                if len(info.split(" "))>1:
                    read_type=info.split(" ")[1].split(":")[0]
                    return read_type
                else:
                    read_type="3"
                    return read_type

    def process_primer(self,crude_primer):
        """prepares a regular expression to incorporate the ambiguous nucleotide characters for searching across the reads"""
        
        primer=""
        nucleotide_dict={"A":"A","T":"T","G":"G","C":"C","R":"(G|A)","Y":"(C|T)","W":"(A|T)","K":"(G|T)","M":"(A|C)","S":"(G|C)","B":"(G|T|C)","D":"(G|A|T)","H":"(A|C|T)","V":"(G|C|A)","N":"(A|G|C|T)"}
        
        for nucleotide in crude_primer:
            primer=primer+nucleotide_dict[nucleotide]

        return primer
	
    def make_trimmed_filename(self,fastq_file):
        """prepare filenames to be used for trimmed and untrimmed files"""
        
        trimmed_file=fastq_file[:-6]+"_trimmed.fastq"
        untrimmed_file=fastq_file[:-6]+"_untrimmed.fastq"
        
        return trimmed_file,untrimmed_file

    def include_errors_primers(self,primer,seq,mismatch):
        """incorporates mismatches and locates the primer on a sequence"""
        
        mismatch_int=int(mismatch)
        regex_list=regex.findall("(%s){s<=%d}"%(primer,mismatch_int),seq)
        
        if not len(regex_list)==0:
            primer=regex_list[0][0]
            primer_search=re.search(primer,seq)
        
        else:
            primer_search=None

        return primer_search,primer,regex_list
			
    def seq_process(self,seq,qual,primer,keep,mismatch):
        """Finds the index of the primer position in the read and trims everything before it."""
        
        trimmed_seq="";trimmed_qual="";untrimmed_seq="";untrimmed_qual=""
	
        primer_search,primer,regex_list=self.include_errors_primers(primer,seq,mismatch)

        if primer_search:
            primer_index=primer_search.start()
            
            if keep=="keep":
                trimmed_seq=seq[primer_index:]
                trimmed_qual=qual[primer_index:]
            elif keep=="unkeep":
                unkeep_index=primer_index+len(primer)
                trimmed_seq=seq[unkeep_index:]
                trimmed_qual=qual[unkeep_index:]
        else:
            untrimmed_seq=seq
            untrimmed_qual=qual

        return trimmed_seq,trimmed_qual,untrimmed_seq,untrimmed_qual

    def remove_empty_file(self,out_folder,file_list):
        
        for file_name in file_list:
            
            if os.stat("%s/%s"%(out_folder,file_name)).st_size == 0:
                print(" Removing ",file_name)
                os.remove("%s/%s"%(out_folder,file_name))

    def print_usage_message(self):
       
        print("usage: MetReTrim [OPTIONS] -i INPUT -o OUTPUT -p PRIMER_SINGLE_END -f PRIMER_FORWARD -r PRIMER_REVERSE\n\nTrim heterogenous 'N' spacer sequences from the 5' end of the pre-processed reads.\n\npositional arguments:\n\n-i, --ifolder\n\tTakes INPUT folder path. INPUT contains the fastq files to be processed.\n\tFastq files can be in a .fastq format or .fastq.gz format.\n\tIn case an output folder is not provided, the processed files will be created in INPUT.\n\n-o, --ofolder\n\tTakes OUTPUT folder path as the desired directory to store the processed reads.\n\tIn case OUTPUT doesn't already exist, the program creates OUTPUT first and then stores the processed files.\n\n-p, --primer\n\tTakes PRIMER_SINGLE_END sequence if the read files have a single end sequencing read data.\n\n-f, --primer1\n\tTakes PRIMER_FORWARD sequence as the forward primer sequence if the read files have a paired end sequencing read data.\n\n-r, --primer2\n\tTakes PRIMER_REVERSE sequence as the reverse primer sequence if the read files have a paired end sequencing read data.\n\n\noptional arguments:\n\n-h\n\tShows this help message and exit\n\n-k, --keep\n\tControls if primer sequence needs to be trimmed along with the 'N' heterogenous spacer sequence\n\tIt can take either of the two options: 1) -k keep or, 2) -k unkeep\n\tDefault: -k keep (retains the primer sequence in the reads)\n\n-m, --mismatch\n\tControls the number of mismatches to be allowed in the primer sequence(s) while locating them in the reads to be processed\n\tDefault: -m 3 (locates primer sequences in the reads to be processed by allowing upto 3 mismatches)\n\n-v, --visualise\n\tControls if a barplot is generated as an output for percentage of trimmed and untrimmed reads per sample (pdf format)\n\tIt can take two options: 1) -v noplot (Default; doesn't output any plot), 2) -v plot\n\n-s, --stringent\n\tBoolean for being stringent in matching primer against read\n\tIt takes two options: 1) -s False (default), 2) -s True\n\n-y, --match_score\n\tPositive Score for a match when running dynamic programming based aligment for untrimmed read and primer pair\n\tDefault: 5\n\n-n, --mismatch_score\n\tNegative score for a mismatch when running dynamic programming based aligment for untrimmed read and primer pair\n\tDefault: -1\n\n-l, --read_gap_open_penalty\n\tNegative penalty for opening a gap in read (integer values)\n\tDefault: -6\n\n-e, --read_gap_extend_penalty\n\tNegative penalty for extending a gap in read (negative float value between 0 and 1)\n\tDefault: -0.6\n\n-x, --primer_gap_open_penalty\n\tNegative penalty for opening a gap in primer (integer value)\n\tDefault: -6\n\n-z, --primer_gap_extend_penalty\n\tNegative penalty for extending a gap in primer (negative float value between 0 and 1)\n\tDefault: -0.6\n\n-c, --min_read_length\n\tMinimum length of read after trimming allowed to qualify into the trimmed file\n\tDefault: 30\n\n-g, --max_gaps\n\tCombined maximum number of gaps allowed in the read and primer aligned regions\n\tDefault: 3\n\n-d, --five_prime_offset\n\tMaximum position number from 5' end in a read the alignment is allowed to qualify for trimming\n\tDefault: 15\n\nNOTE:\n\n1) In case the input folder has both single-end and paired-end read files, all the three -f -r and -p primer sequence options are required.\n2) If using paired end reads, make sure the forward reads and reverse reads are segregated into two files.\n3) Please provide the full and correct paths of the input and output folders.\n\nHappy Trimming!! :)\n")
        
        sys.exit(2)

    def main(self,argv):
        """Takes the command line argument list excluding the python executable file name and trims the reads."""
	
        in_folder,out_folder,primer,primer1,primer2,keep,mismatch,visualise,stringent,match_score,mismatch_score,read_gap_open_penalty,read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty,min_read_length,max_gaps,five_prime_offset=self.assign_command_line_args_as_variables(argv)   
	
        try:
            if len(out_folder)==0:out_folder=in_folder
            l_primer=self.prepare_non_empty_primer_list_to_trim(in_folder,out_folder,primer,primer1,primer2)
            try:
                self.make_trimmed_directory(out_folder)
                self.unzip_file(in_folder)
                self.trim_reads(in_folder,out_folder,l_primer,keep,mismatch)

                if stringent=="false" or stringent=="False" or stringent=="F" or stringent =="f":
                    if len(os.listdir('%s'%out_folder))==0:
                        pass
                    elif not len(os.listdir('%s'%out_folder))==0:
                        self.rescue_untrimmed_reads(out_folder,l_primer,keep,match_score,mismatch_score,read_gap_open_penalty,read_gap_extend_penalty,primer_gap_open_penalty,primer_gap_extend_penalty,min_read_length,max_gaps,five_prime_offset)

                if visualise=="plot":
                    if len(os.listdir('%s'%out_folder))==0:
                        print("No output files to plot. Check if the input is correct.\n")
                    elif not len(os.listdir('%s'%out_folder))==0:
                        self.plot_barplot(out_folder)

            except OSError:self.print_usage_message()
        except IOError:self.print_usage_message()

if __name__ == "__main__":
        
    to_trim=MetReTrim()
    to_trim.main(sys.argv[1:])
